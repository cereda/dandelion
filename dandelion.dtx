% \iffalse meta-comment
% 
%% File: dandelion.dtx (C) Copyright 2013 The LaTeX3 Project
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "dandelion bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -----------------------------------------------------------------------
%%
%% The development version of the bundle can be found at
%%
%%    http://www.latex-project.org/svnroot/experimental/trunk/
%%
%% for those people who are interested.
%%
%%%%%%%%%%%
%% NOTE: %%
%%%%%%%%%%%
%%
%%   Snapshots taken from the repository represent work in progress and may
%%   not work or may contain conflicting material!  We therefore ask
%%   people _not_ to put them into distributions, archives, etc. without
%%   prior consultation with the LaTeX Project Team.
%%
%% -----------------------------------------------------------------------
%%
%
%<*driver>
\documentclass[full]{l3doc}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
%
% \fi
% 
% \title{The \pkg{dandelion} bundle\\A system for testing \LaTeX{} code}
%
% \author{^^A
%  The \LaTeX3 Project\thanks
%    {^^A
%      E-mail:
%        \href{mailto:latex-team@latex-project.org}
%          {latex-team@latex-project.org}^^A
%    }^^A
% }
%
% \maketitle
% 
% \begin{documentation}
% 
% \section{Overview}
%
% The \pkg{dandelion} bundle aims to provide a system for testing \LaTeX{} code
% so that the outcome of a particular piece of input is well-defined, and so
% that changes in one place do not lead to unexpected consequences in others.
% This is done by writing material to the \file{log} file used by \LaTeX{},
% and comparing the \emph{actual} result to that \emph{expected}. Writing to
% the log avoids the need to validate the output of \LaTeX{}, which is normally
% in the form a a \file{dvi} or \textsc{pdf} file. The use of the \file{log}
% file makes automated testing much easier than would otherwise be the case.
% 
% A typical \pkg{dandelion} test file will look much like a normal \LaTeX{}
% document, by will contain dedicated test environments and meta-data about
% these tests encoded in comments
% \begin{verbatim}
%   \documentclass{article}
%   \usepackage{dandelion}
%   \begin{document}
%   % !test
%   % id: mytest
%   % name: My test
%   % author: me
%   % group: foo
%   % description: An example test
%   % expects:
%   %%% 1234
%   \begin{TEST}{mytest}
%     \TYPE{1234}
%   \end{TEST}
%   \end{document}
% \end{verbatim}
% 
% The example above includes only one test: it is possible to include
% many tests in one file and to run these selectively. The \pkg{dandelion}
% script will run tests requested and report on the success (or otherwise)
% of the run. This part of the bundle is described in
% Section~\ref{sec:script}.
% 
% \section{Test environments}
%
% \begin{function}{TEST}
%   \begin{syntax}
%     \cs{begin}|{TEST}|\Arg{id}
%     ~~\meta{test code}
%     \cs{end}|{TEST}|  
%   \end{syntax}
%   Carries out the test with name \meta{id}, logging the results and
%   formatting correctly for analysis by the script. Only material which is
%   written to the log is analysed: this may be for example if \TeX{} is
%   asked to \cs{show...} something in the terminal, or if \cs{TYPE} is used
%   to write material to the log deliberately.
%   
%   Set up code for tests can be given before the start of a \texttt{TEST}
%   environment. This can be used for example to avoid parts of the log
%   being analysed if they may vary between tests.
% \end{function}
% 
% \begin{function}{TEST*}
%   \begin{syntax}
%     \cs{begin}|{TEST*}|\Arg{id}
%     ~~\meta{test code}
%     \cs{end}|{TEST*}|  
%   \end{syntax}
%   Carries out the test with name \meta{id}, logging the results and
%   formatting correctly for analysis by the script. The \meta{test code}
%   should be fully expandable, and should write to the log file for
%   analysis. The \cs{TYPE} command may be used to place material into
%   the log.
%   
%   As with the standard \texttt{TEST} environment, code may be given
%   before the beginning of a \texttt{TEST*} block as set up.
% \end{function}
% 
% \section{Commands for tests}
%
% Unusually for a \LaTeX{} package, all of the commands provided by
% \pkg{dandelion} have all upper case names. This makes clashes with any
% \enquote{normal} command names extremely unlikely.
% 
% \begin{function}{\TYPE}
%   \begin{syntax}
%     \cs{TYPE}\Arg{code}
%   \end{syntax}
%   Expands the \meta{code} fully (\cs{edef}/\texttt{x}-type expansion) and
%   writes the result to the log file for analysis.
% \end{function}
% 
% \begin{function}{\TRUE, \FALSE, \YES, \NO}
%   \begin{syntax}
%     \cs{TRUE}
%     \cs{FALSE}
%     \cs{YES}
%     \cs{NO}
%   \end{syntax}
%   Shortcut commands to write \texttt{TRUE}, \texttt{FALSE}, \texttt{YES}
%   and \texttt{NO} to the log, respectively. (Equivalent to |\TYPE{TRUE}| and
%   so on.)
% \end{function}
% 
% \begin{function}{\ERROR}
%   \begin{syntax}
%     \cs{ERROR}
%   \end{syntax}
%   Used to indicate an error has occurred within a test: this command is never
%   defined and so will raise an \texttt{Undefined control sequence} error in
%   the log.
% \end{function}
% 
% \begin{function}{\NEWLINE}
%   \begin{syntax}
%     \cs{NEWLINE}
%   \end{syntax}
%   Used to start a new line in the log: useful within expandable tests to keep
%   the output human-readable.
% \end{function}
% 
% \section{Meta-comments}
% 
% To pass information between the \LaTeX{} test file and \pkg{dandelion}
% script, a number of special-formatted comments are used.
% 
% \section{The script}
% \label{sec:script}
%
% \end{documentation}
% 
% \begin{implementation}
% 
% \section{\pkg{dandelion} implementation}
% 
% \subsection{\LaTeXe{} package}
% 
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%    
% Output to the log requires a small number of supporting commands to be
% loaded in \LaTeX. At present, that means providing a \LaTeXe{} package:
% we are \enquote{well-behaved} in that sense.
%    
%    \begin{macrocode}
\ProvidesPackage{dandelion}
  [2013/04/01 v1.0.3 A system for testing LaTeX code]
%    \end{macrocode}
% 
% Scroll as much as possible while still providing terminal output, which can
% be useful when things go badly wrong.
%    \begin{macrocode}
\nonstopmode
%    \end{macrocode}
%    
% \begin{macro}[int]{\TYPEOUT}
% \begin{macro}{\TYPE}
%   A long version of \cs{typeout}, because tests may contain \cs{par} tokens.
%   Besides, with that \cs{TYPE}, we can do
%   \verb|\TYPE { ... \TRUE ... \NEWLINE ... }|.
%    \begin{macrocode}
\newcommand{\TYPEOUT}[1]{%
  \begingroup
    \set@display@protect
    \let\TYPE\@firstofone
    \immediate\write\@unused{#1}%
  \endgroup
}
\newcommand{\TYPE}{}
\let\TYPE\TYPEOUT
%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
% To allow collection of expandable test material from an environment, the
% \pkg{environ} package is used. (The same code could be copied here, but this
% is rather redundant.)
%    \begin{macrocode}
\RequirePackage{environ}
%    \end{macrocode}
%    
% \begin{macro}[int]{\TESTNAME}
%   Used to store the name of the current test so it is available at the end of
%   the \texttt{TEST} environment.
%    \begin{macrocode}
\newcommand*{\TESTNAME}{}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}[int]{\TESTGROUPLEVEL}
%   Stores the grouping level expected at the end of a test: will normally be
%   1 but inside an expandable test needs to be 2.
%    \begin{macrocode}
\newcommand*{\TESTGROUPLEVEL}{1}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{TEST}
% \begin{macro}{TEST*}
%   Testing itself takes place in an environment. The standard test set up simply
%   inserts the code supplied, with \cs{TYPE} equal to \cs{TYPEOUT} so that some
%   output may be produced. At the end of the test, there is a sanity check for
%   nested groups and conditional levels: this can be handy to pick up otherwise 
%   hard-to-spot errors.
%    \begin{macrocode}
\newenvironment{TEST}[1]{%
  \renewcommand*{\TESTNAME}{#1}%
  \typeout{===== begin:test:\TESTNAME}%
  \let\TYPE\TYPEOUT
}{%
  \ifnum\currentgrouplevel>\TESTGROUPLEVEL\space
    \typeout{%
      Bad grouping:
      \the\numexpr\currentgrouplevel - \TESTGROUPLEVEL - 1\relax
      \space extra level!%
    }%
  \fi
  \ifnum\currentiflevel>1 %
    \typeout{%
      Bad conditionals: \the\numexpr\currentiflevel - 1\relax
      \space extra level!%
    }%
  \fi
  \typeout{===== end:test:\TESTNAME}%
}
\NewEnviron{TEST*}[1]{%
  \renewcommand*{\TESTGROUPLEVEL}{2}%
  \begin{TEST}{#1}%
    \let\TYPE\@firstofone
    \TYPEOUT{\BODY}%
  \end{TEST}%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%    
% \begin{macro}{\TRUE, \FALSE}
% \begin{macro}{\YES, \NO}
%   Simple printing of some useful text to the log.
%    \begin{macrocode}
\newcommand*{\TRUE}{\TYPE{TRUE}}
\newcommand*{\FALSE}{\TYPE{TRUE}}
\newcommand*{\YES}{\TYPE{YES}}
\newcommand*{\NO}{\TYPE{NO}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\NEWLINE}
%   Inside expandable tests, forcing a newline makes life a bit easier.
%    \begin{macrocode}
\newcommand*{\NEWLINE}{\TYPE{^^J}}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\ERROR}
%   A marker in the implementation for a command that is never defined:
%   used in various places to indicate an error has occurred.
% \end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \end{implementation}
% 
% \PrintIndex